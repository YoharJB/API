name: Mover archivos a API

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  move-to-api-repo:
    runs-on: ubuntu-latest
    steps:
      # Chequear el código del repositorio principal
      - name: Checkout principal repo
        uses: actions/checkout@v4
        with:
          repository: YoharJB/API
          token: ${{ secrets.BOT }}
          ref: main

      # Chequear el código del repositorio de API
      - name: Checkout repo API-RAW
        uses: actions/checkout@v4
        with:
          repository: YoharJB/API-RAW
          token: ${{ secrets.BOT }}
          path: API-RAW
          ref: main

      # Mover los archivos
      - name: Mover archivos
        run: |
          # Usar rsync para mover y actualizar todos los archivos
          rsync -av ./API/Addons/ ./API-RAW/API/Addons/
          rsync -av ./API/ElvUI/ ./API-RAW/API/ElvUI/
          rsync -av ./API/WeakAuras/ ./API-RAW/API/WeakAuras/

      # Clasificar y combinar JSONs
      - name: Clasificar y combinar JSONs
        run: |
          # Rutas de los archivos JSON de destino
          DEST_MADDONS_JSON="./API-RAW/API/Maddons.json"
          DEST_ELVUI_JSON="./API-RAW/API/ElvUI.json"
          DEST_WEAKAURAS_JSON="./API-RAW/API/WeakAuras.json"

          # Crear archivos temporales para combinar
          TEMP_MADDONS_JSON="./temp_maddons_combined.json"
          TEMP_ELVUI_JSON="./temp_elvui_combined.json"
          TEMP_WEAKAURAS_JSON="./temp_wa_combined.json"

          # Inicializar los archivos temporales como arrays vacíos
          echo "[]" > "$TEMP_MADDONS_JSON"
          echo "[]" > "$TEMP_ELVUI_JSON"
          echo "[]" > "$TEMP_WEAKAURAS_JSON"

          # Procesar todos los JSONs en la carpeta API
          find ./API -name '*.json' | while read USER_JSON; do
            if [[ "$USER_JSON" == *"/Addons/"* ]]; then
              echo "Agregando $USER_JSON a Maddons.json"
              jq -s '.[0] + .[1]' "$TEMP_MADDONS_JSON" "$USER_JSON" > ./temp.json && mv ./temp.json "$TEMP_MADDONS_JSON"
            elif [[ "$USER_JSON" == *"/ElvUI/"* ]]; then
              echo "Agregando $USER_JSON a ElvUI.json"
              jq -s '.[0] + .[1]' "$TEMP_ELVUI_JSON" "$USER_JSON" > ./temp.json && mv ./temp.json "$TEMP_ELVUI_JSON"
            elif [[ "$USER_JSON" == *"/WeakAuras/"* ]]; then
              echo "Agregando $USER_JSON a WeakAuras.json"
              jq -s '.[0] + .[1]' "$TEMP_WEAKAURAS_JSON" "$USER_JSON" > ./temp.json && mv ./temp.json "$TEMP_WEAKAURAS_JSON"
            else
              echo "Archivo $USER_JSON no pertenece a ninguna categoría conocida. Ignorando."
            fi
          done

          # Combinar los archivos temporales con los JSON existentes en API-RAW
          jq -s '.[0] + .[1]' "$DEST_MADDONS_JSON" "$TEMP_MADDONS_JSON" > ./API-RAW/API/Maddons_updated.json && mv ./API-RAW/API/Maddons_updated.json "$DEST_MADDONS_JSON"
          jq -s '.[0] + .[1]' "$DEST_ELVUI_JSON" "$TEMP_ELVUI_JSON" > ./API-RAW/API/ElvUI_updated.json && mv ./API-RAW/API/ElvUI_updated.json "$DEST_ELVUI_JSON"
          jq -s '.[0] + .[1]' "$DEST_WEAKAURAS_JSON" "$TEMP_WEAKAURAS_JSON" > ./API-RAW/API/WeakAuras_updated.json && mv ./API-RAW/API/WeakAuras_updated.json "$DEST_WEAKAURAS_JSON"

          # Limpiar archivos temporales
          rm -f "$TEMP_MADDONS_JSON" "$TEMP_ELVUI_JSON" "$TEMP_WEAKAURAS_JSON"

      # Commit de los cambios en el repositorio de API-RAW
      - name: Commit y push cambios
        uses: cpina/github-action-push-to-another-repository@main
        with:
          source-directory: "API-RAW"
          destination-github-username: YoharJB
          destination-repository-name: API-RAW
          user-email: "actions@github.com"
          user-name: "GitHub Actions"
        env:
          API_TOKEN_GITHUB: ${{ secrets.BOT }}

      # Eliminar archivos procesados en API
      - name: Eliminar archivos procesados
        run: |
          # Limpiar carpetas específicas
          TARGET_DIRS=(
            "./API/Addons"
            "./API/ElvUI"
            "./API/WeakAuras"
          )

          # Eliminar archivos específicos en las carpetas objetivo
          for DIR in "${TARGET_DIRS[@]}"; do
            if [ -d "$DIR" ]; then
              find "$DIR" -type f \( -iname "*.webp" -o -iname "*.zip" -o -iname "*.md" -o -iname "*.json" \) -exec rm -f {} \;
            fi
          done

      # Hacer commit de los cambios de limpieza en API
      - name: Commit cambios de limpieza
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git add .
          git commit -m "Limpiar archivos procesados en API"
          git push
